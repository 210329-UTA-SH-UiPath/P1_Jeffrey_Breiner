/* 
 * PizzaBox.Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Order
    /// </summary>
    [DataContract]
        public partial class Order :  IEquatable<Order>, IValidatableObject
    {
        public Order()
        {
            Pizza = new List<APizza>();
            Customer = new Customer();
            Store = new AStore();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="Order" /> class.
        /// </summary>
        /// <param name="store">store.</param>
        /// <param name="customer">customer.</param>
        /// <param name="pizza">pizza.</param>
        /// <param name="priceTotal">priceTotal.</param>
        /// <param name="timeStamp">timeStamp.</param>
        /// <param name="id">id.</param>
        public Order(AStore store = default(AStore), Customer customer = default(Customer), List<APizza> pizza = default(List<APizza>), double? priceTotal = default(double?), DateTime? timeStamp = default(DateTime?), int? id = default(int?))
        {
            this.Store = store;
            this.Customer = customer;
            this.Pizza = pizza;
            this.PriceTotal = priceTotal;
            this.TimeStamp = timeStamp;
            this.Id = id;
        }
        
        /// <summary>
        /// Gets or Sets Store
        /// </summary>
        [DataMember(Name="store", EmitDefaultValue=false)]
        public AStore Store { get; set; }

        /// <summary>
        /// Gets or Sets Customer
        /// </summary>
        [DataMember(Name="customer", EmitDefaultValue=false)]
        public Customer Customer { get; set; }

        /// <summary>
        /// Gets or Sets Pizza
        /// </summary>
        [DataMember(Name="pizza", EmitDefaultValue=false)]
        public List<APizza> Pizza { get; set; }

        /// <summary>
        /// Gets or Sets PriceTotal
        /// </summary>
        [DataMember(Name="priceTotal", EmitDefaultValue=false)]
        public double? PriceTotal { get; set; }

        /// <summary>
        /// Gets or Sets TimeStamp
        /// </summary>
        [DataMember(Name="timeStamp", EmitDefaultValue=false)]
        public DateTime? TimeStamp { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Order {\n");
            sb.Append("  Store: ").Append(Store).Append("\n");
            sb.Append("  Customer: ").Append(Customer).Append("\n");
            sb.Append("  Pizza: ").Append(Pizza).Append("\n");
            sb.Append("  PriceTotal: ").Append(PriceTotal).Append("\n");
            sb.Append("  TimeStamp: ").Append(TimeStamp).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Order);
        }

        /// <summary>
        /// Returns true if Order instances are equal
        /// </summary>
        /// <param name="input">Instance of Order to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Order input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Store == input.Store ||
                    (this.Store != null &&
                    this.Store.Equals(input.Store))
                ) && 
                (
                    this.Customer == input.Customer ||
                    (this.Customer != null &&
                    this.Customer.Equals(input.Customer))
                ) && 
                (
                    this.Pizza == input.Pizza ||
                    this.Pizza != null &&
                    input.Pizza != null &&
                    this.Pizza.SequenceEqual(input.Pizza)
                ) && 
                (
                    this.PriceTotal == input.PriceTotal ||
                    (this.PriceTotal != null &&
                    this.PriceTotal.Equals(input.PriceTotal))
                ) && 
                (
                    this.TimeStamp == input.TimeStamp ||
                    (this.TimeStamp != null &&
                    this.TimeStamp.Equals(input.TimeStamp))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Store != null)
                    hashCode = hashCode * 59 + this.Store.GetHashCode();
                if (this.Customer != null)
                    hashCode = hashCode * 59 + this.Customer.GetHashCode();
                if (this.Pizza != null)
                    hashCode = hashCode * 59 + this.Pizza.GetHashCode();
                if (this.PriceTotal != null)
                    hashCode = hashCode * 59 + this.PriceTotal.GetHashCode();
                if (this.TimeStamp != null)
                    hashCode = hashCode * 59 + this.TimeStamp.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
