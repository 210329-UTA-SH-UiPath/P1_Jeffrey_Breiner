/* 
 * PizzaBox.Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// APizza
    /// </summary>
    [DataContract]
        public partial class APizza :  IEquatable<APizza>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="APizza" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="crust">crust.</param>
        /// <param name="size">size.</param>
        /// <param name="toppings">toppings.</param>
        /// <param name="price">price.</param>
        /// <param name="pizza">pizza.</param>
        /// <param name="id">id.</param>
        public APizza(string name = default(string), ACrust crust = default(ACrust), ASize size = default(ASize), List<ATopping> toppings = default(List<ATopping>), double? price = default(double?), PIZZAS pizza = default(PIZZAS), int? id = default(int?))
        {
            this.Name = name;
            this.Crust = crust;
            this.Size = size;
            this.Toppings = toppings;
            this.Price = price;
            this.Pizza = pizza;
            this.Id = id;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Crust
        /// </summary>
        [DataMember(Name="crust", EmitDefaultValue=false)]
        public ACrust Crust { get; set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [DataMember(Name="size", EmitDefaultValue=false)]
        public ASize Size { get; set; }

        /// <summary>
        /// Gets or Sets Toppings
        /// </summary>
        [DataMember(Name="toppings", EmitDefaultValue=false)]
        public List<ATopping> Toppings { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public double? Price { get; set; }

        /// <summary>
        /// Gets or Sets Pizza
        /// </summary>
        [DataMember(Name="pizza", EmitDefaultValue=false)]
        public PIZZAS Pizza { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class APizza {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Crust: ").Append(Crust).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Toppings: ").Append(Toppings).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Pizza: ").Append(Pizza).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as APizza);
        }

        /// <summary>
        /// Returns true if APizza instances are equal
        /// </summary>
        /// <param name="input">Instance of APizza to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(APizza input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Crust == input.Crust ||
                    (this.Crust != null &&
                    this.Crust.Equals(input.Crust))
                ) && 
                (
                    this.Size == input.Size ||
                    (this.Size != null &&
                    this.Size.Equals(input.Size))
                ) && 
                (
                    this.Toppings == input.Toppings ||
                    this.Toppings != null &&
                    input.Toppings != null &&
                    this.Toppings.SequenceEqual(input.Toppings)
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && 
                (
                    this.Pizza == input.Pizza ||
                    (this.Pizza != null &&
                    this.Pizza.Equals(input.Pizza))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Crust != null)
                    hashCode = hashCode * 59 + this.Crust.GetHashCode();
                if (this.Size != null)
                    hashCode = hashCode * 59 + this.Size.GetHashCode();
                if (this.Toppings != null)
                    hashCode = hashCode * 59 + this.Toppings.GetHashCode();
                if (this.Price != null)
                    hashCode = hashCode * 59 + this.Price.GetHashCode();
                if (this.Pizza != null)
                    hashCode = hashCode * 59 + this.Pizza.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
